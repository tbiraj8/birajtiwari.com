# AWSTemplateFormatVersion: '2010-09-09'
# Description: 'API Gateway with Python Lambda integration'

# Resources:
#   LambdaFunction:
#     Type: 'AWS::Lambda::Function'
#     DependsOn: LambdaExecutionRole
#     Properties:
#       FunctionName: !Sub ${AWS::StackName}-api-handler
#       Runtime: python3.9
#       Handler: index.handler
#       Code: 
#         S3Bucket: YOUR_BUCKET_NAME
#         S3Key: lambda-code.zip
#       Role: !GetAtt LambdaExecutionRole.Arn
#       Timeout: 30
#       MemorySize: 128

#   LambdaExecutionRole:
#     Type: 'AWS::IAM::Role'
#     Properties:
#       RoleName: !Sub ${AWS::StackName}-lambda-role
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: lambda.amazonaws.com
#             Action: sts:AssumeRole
#       ManagedPolicyArns:
#         - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

#   ApiGateway:
#     Type: 'AWS::ApiGateway::RestApi'
#     Properties:
#       Name: !Sub ${AWS::StackName}-api
#       Description: API Gateway for Lambda integration

#   ApiResource:
#     Type: 'AWS::ApiGateway::Resource'
#     Properties:
#       RestApiId: !Ref ApiGateway
#       ParentId: !GetAtt ApiGateway.RootResourceId
#       PathPart: 'items'

#   ApiMethod:
#     Type: 'AWS::ApiGateway::Method'
#     Properties:
#       RestApiId: !Ref ApiGateway
#       ResourceId: !Ref ApiResource
#       HttpMethod: POST
#       AuthorizationType: NONE
#       Integration:
#         Type: AWS_PROXY
#         IntegrationHttpMethod: POST
#         Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations

#   OptionsMethod:
#     Type: 'AWS::ApiGateway::Method'
#     Properties:
#       RestApiId: !Ref ApiGateway
#       ResourceId: !Ref ApiResource
#       HttpMethod: OPTIONS
#       AuthorizationType: NONE
#       Integration:
#         Type: MOCK
#         IntegrationResponses:
#           - StatusCode: 200
#             ResponseParameters:
#               method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
#               method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
#               method.response.header.Access-Control-Allow-Origin: "'*'"
#             ResponseTemplates:
#               application/json: ''
#         RequestTemplates:
#           application/json: '{"statusCode": 200}'
#       MethodResponses:
#         - StatusCode: 200
#           ResponseParameters:
#             method.response.header.Access-Control-Allow-Headers: true
#             method.response.header.Access-Control-Allow-Methods: true
#             method.response.header.Access-Control-Allow-Origin: true

#   LambdaPermission:
#     Type: 'AWS::Lambda::Permission'
#     Properties:
#       Action: lambda:InvokeFunction
#       FunctionName: !Ref LambdaFunction
#       Principal: apigateway.amazonaws.com
#       SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/items

#   ApiDeployment:
#     Type: 'AWS::ApiGateway::Deployment'
#     DependsOn: 
#       - ApiMethod
#       - OptionsMethod
#     Properties:
#       RestApiId: !Ref ApiGateway

#   ApiStage:
#     Type: 'AWS::ApiGateway::Stage'
#     Properties:
#       DeploymentId: !Ref ApiDeployment
#       RestApiId: !Ref ApiGateway
#       StageName: prod

# Outputs:
#   ApiEndpoint:
#     Description: API Endpoint URL
#     Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/items
#   LambdaFunction:
#     Description: Lambda Function Name
#     Value: !Ref LambdaFunction

AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway with Python Lambda integration'

Resources:
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: !Sub ${AWS::StackName}-api-handler
      Runtime: python3.9
      Handler: index.handler
      Code: 
        ZipFile: |
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*'
                  },
                  'body': 'Hello from Lambda!'
              }
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ContactFormEntries

  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub ${AWS::StackName}-api
      Description: API Gateway for Lambda integration

  ApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'items'

  ApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations

  OptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/items

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: 
      - ApiMethod
      - OptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway

  ApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref ApiGateway
      StageName: prod

Outputs:
  ApiEndpoint:
    Description: API Endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/items
  LambdaFunction:
    Description: Lambda Function Name
    Value: !Ref LambdaFunction